# Each Event will have its own type in order to track the events (Marketing)
# Then I created the Private Entities to manage the front-end needs.

#------------------------------------------------------------------------------------
#                               UTOKEN
#------------------------------------------------------------------------------------
type UTokenBorrow @entity {
  id: ID! # Transaction Hash
  onBehalfOf: Bytes!
  iniciator: Bytes!
  amount: BigInt!
  loanId: Bytes!
  underlyingAsset: Bytes!
  borrowRate: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UTokenRepay @entity {
  id: ID! # Transaction Hash
  iniciator: Bytes!
  loanId: Bytes!
  underlyingAsset: Bytes!
  amount: BigInt!
  onBehalfOf: Bytes!
  borrowRate: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Supply @entity {
  id: ID! # Transaction Hash
  user: Bytes!
  onBehalfOf: Bytes!
  underlyingAsset: Bytes!
  amount: BigInt!
  
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity {
  id: ID! # Transaction Hash
  user: Bytes!
  underlyingAsset: Bytes!
  amount: BigInt!
  to: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

#------------------------------------------------------------------------------------
#                               ACTION
#------------------------------------------------------------------------------------

type Borrow @entity {
  id: ID! # Transaction Hash
  user: Bytes! # address
  loanId: Bytes!
  amount: BigInt!
  totalAssets: BigInt!
  token: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

type AddCollateral @entity {
  id: ID! # assetId
  loanId: Bytes! # address
  collection: Bytes!
  tokenId: BigInt!
  assetId: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

type Repay @entity {
  id: ID! # Transaction Hash
  user: Bytes! # address
  loanId: Bytes!
  amount: BigInt!
  assets: [Bytes!]! # assetIds
  totalAssets: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

#------------------------------------------------------------------------------------
#                               Market
#------------------------------------------------------------------------------------

type MarketCreated @entity(immutable: false) {
  id: ID! # Transaction Hash
  loanId: Bytes! # bytes32
  assetId: Bytes! # bytes32
  orderId: Bytes! # bytes32
  collection: Bytes! # address
  tokenId: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

type MarketBid @entity(immutable: false) {
  id: ID! # Transaction Hash
  loanId: Bytes! # bytes32
  orderId: Bytes! # bytes32
  assetId: Bytes! # bytes32
  amountToPay: BigInt! # address
  amountOfDebt: BigInt!
  amount: BigInt!
  user: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

type MarketClaim @entity(immutable: false) {
  id: ID! # Transaction Hash
  loanId: Bytes! # bytes32
  assetId: Bytes! # bytes32
  orderId: Bytes! # bytes32
  amount: BigInt! # uint256
  bidder: Bytes! # address
  receiver: Bytes! # address
  user: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

type MarketBuyNow @entity(immutable: false) {
  id: ID! # Transaction Hash
  loanId: Bytes! # bytes32
  assetId: Bytes! # bytes32
  orderId: Bytes! # bytes32
  amount: BigInt! # uint256
  user: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

#------------------------------------------------------------------------------------
#                               AUCTION
#------------------------------------------------------------------------------------

type AuctionOrderRedeemed @entity(immutable: false) {
  id: ID!  # Transaction Hash
  loanId: Bytes! # bytes32
  orderId: Bytes! # bytes32
  amountOfDebt: BigInt! 
  amountToPay: BigInt! 
  bonus: BigInt! 
  countBids: BigInt! 

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

type AuctionBid @entity(immutable: false) {
  id: ID! # Transaction Hash
  loanId: Bytes! # bytes32
  orderId: Bytes! # bytes32
  assetId: Bytes! # bytes32
  amountToPay: BigInt!
  amountOfDebt: BigInt!
  user: Bytes!
  
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

type AuctionFinalize @entity(immutable: false) {
  id: ID! # Transaction Hash
  loanId: Bytes! # bytes32
  orderId: Bytes! # bytes32
  assetId: Bytes! # bytes32
  debtAmount: BigInt! # address
  amount: BigInt! # address
  winner: Bytes! # address
  owner: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

type  AuctionRedeem @entity(immutable: false) { 
  id: ID! # Transaction Hash
  loanId: Bytes!
  amount: BigInt!
  user: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes! 
}
#------------------------------------------------------------------------------------
#                               SELLNOW
#------------------------------------------------------------------------------------

type Sold @entity(immutable: false) {
  id: ID! # Transaction Hash
  assetId: Bytes! # bytes32
  collection: Bytes! # address
  tokenId: BigInt!
  amount: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

type ForceSold @entity(immutable: false) {
  id: ID! # Transaction Hash
  loanId: Bytes! # bytes32
  assetId: Bytes! # bytes32
  collection: Bytes! # address
  tokenId: BigInt!
  marketPrice: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

#------------------------------------------------------------------------------------
#                               UNLOCKD
#------------------------------------------------------------------------------------

type ProxyCreated @entity(immutable: false) {
  id: ID! # Transaction Hash
  proxy: Bytes! # address

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

#------------------------------------------------------------------------------------
#                               ORDER LOGIC
#------------------------------------------------------------------------------------

type OrderCreated @entity(immutable: false) {
  id: ID! # Transaction Hash
  loanId: Bytes!
  owner: Bytes!
  orderId: Bytes!
  orderType: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

#------------------------------------------------------------------------------------
#                               LOAN LOGIC
#------------------------------------------------------------------------------------

type LoanCreated @entity(immutable: false) {
  id: ID! # Transaction Hash
  user: Bytes!
  loanId: Bytes!
  totalAssets: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  transactionInput: Bytes!
}

#------------------------------------------------------------------------------------
#                              CRYPTO PUNKS
#------------------------------------------------------------------------------------

type Punk @entity(immutable: false) {
  id: ID!
  owner: Bytes! # address
}

#------------------------------------------------------------------------------------
#                              PRIVATE ENTITIES
#------------------------------------------------------------------------------------

# To be used with the MarketBid in order to store the newBuyer
type Buyer @entity(immutable: false) {
  id: ID! # event.params.assetId.toHexString().concat(event.params.user.toHexString())
  loanId: Bytes! # bytes32
  assetId: Bytes! # bytes32
  orderId: Bytes! # bytes32
  user: Bytes! # address
}

# Stores the user account that have/had a loan in the protocol
type Account @entity {
  id: ID! # user address
  user: Bytes! # address
  amountDeposited: BigInt!
  amountBorrowed: BigInt!
  totalAssets: BigInt!
  borrows: [Loan!]! @derivedFrom(field: "user")
}

# Counts the total amount of NFTs in the protocol
type TotalCount @entity(immutable: false) {
  id: ID!
  totalCount: BigInt!
}

# Stores the allowed collection in the protocol
type Collection @entity(immutable: false) {
  id: ID! # collection address
  isAllowed: Boolean!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Manages the Loans in the protocol, shouldn't be deleted
type Loan @entity(immutable: false) {
  id: ID! # loanId
  status: BigInt!
  user: Account! # address
  amount: BigInt!
  totalAssets: BigInt!
  underlyingAsset: Bytes! # address
  assets: [Asset!]! @derivedFrom(field: "loan")
}

# Manages the Assets in the protocol this should change as the owner changes.
type Asset @entity {
    id: ID! # assetId
    collection: Bytes!
    tokenId: BigInt!
    isOnAuction: Boolean!
    loan: Loan! 
}

# Manages the Orders in the protocol, shouldn't be deleted
type Order @entity(immutable: false) {
  id: ID! # orderId
  status: BigInt!
  orderType: String!
  date: BigInt!
  assetId: Bytes! # bytes32
  collection: Bytes! # address
  tokenId: BigInt!
  seller: Bytes! # address
  loanId: Bytes! # bytes32
  debtToSell: BigInt!
  startAmount: BigInt!
  endAmount: BigInt!
  startTime: BigInt!
  endTime: BigInt!
  lastBidder: Bytes! # address
  lastBidAmount: BigInt!
  bidder: Bytes! # address
  bidAmount: BigInt!
  buyer: Bytes! # address
  buyerAmount: BigInt!
  bids: [Bid!]! @derivedFrom(field: "order")
  loan: Loan!
}

# Manages the Bids in the orders, shouldn't be deleted
type Bid @entity {
  id: ID! 
  bidder: Bytes! # address
  bidAmount: BigInt!
  amountOfDebt: BigInt!
  amountToPay: BigInt!
  order: Order!
}